generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String           @id @default(uuid())
  studentId           String?          @unique
  studentFirstName    String
  studentLastName     String
  studentEmail        String           @unique
  studentPassword     String?
  studentPasswordSalt String?
  refreshToken        String?
  isActivate          Boolean          @default(false)
  isBanned            Boolean?         @default(false)
  loginAttempt        Int?             @default(0)
  userLevel           userLevel        @default(STUDENT)
  lastLogin           DateTime?
  lineUserID          String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())
  AccountInfo         AccountInfo?
  StudentActivity     StudentActivity?
  StudentGrade        StudentGrade?
}

model AccountInfo {
  id                String   @id @default(cuid())
  accountId         String   @unique
  nickname          String?
  educateGroup      Int
  graduateSchool    String?
  admissionYear     Int?
  profileImageUrl   String?
  canContactAddress String?
  currentAddress    String?
  workAddress       String?
  phoneNumber       String?
  facebookAccount   String?
  lineID            String?
  privacyPermission Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  Account           Account  @relation(fields: [accountId], references: [id])
}

model StudentActivity {
  id                  String   @id @default(cuid())
  accountId           String?  @unique
  studentId           String?
  activityAllCount    Int
  activityJoinedCount Int
  createdAt           DateTime @default(now())
  Account             Account? @relation(fields: [accountId], references: [id])
}

model StudentGrade {
  id                    String   @id
  StudentId             String
  totalCredit           Float?
  totalAverageGrade     Float?
  totalMainSubjectGrade Float?
  createdAt             DateTime @default(now())
  accountId             String?  @unique
  Account               Account? @relation(fields: [accountId], references: [id])
}

model activityCalendar {
  id                String   @id @default(uuid())
  activityName      String?
  activityDetail    String?
  activityStartDate DateTime @default(now())
  activityEndDate   DateTime @default(now())
  activityLocation  String?
  activityImage     String?
}

model news {
  id          String   @id @default(uuid())
  newsTitle   String?
  newsDetails String?
  newsImage   String?
  newsUrl     String?
  newsType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

enum userLevel {
  ADMIN
  STUDENT
  TEACHER
}
